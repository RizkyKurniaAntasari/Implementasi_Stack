#include <iostream>
#include <stack>
#include <bits/stdc++.h>
#include <string>

using namespace std;

int precedence(char c){
    if (c == '/' || c == '*' || c == '%') return 3;
    else if (c =='+' || c == '-') return 4;
    return 0;
}

bool IsOP(char s){
    return (s == '/' || s == '*' || s == '%' || s == '-' || s == '+');
}

string removeWhitespace(string str){
    string result;
    for(char c : str){
        if(!isspace(c)){
            result.push_back(c);
        }
    }
    return result;
}

vector<string> ToInfix(string s){
    vector<string> infix;
    string temp;
    
    for(size_t i = 0; i < s.size(); i++){
        if(isdigit(s[i]) || (s[i]=='-' && (i==0 || IsOP(s[i-1]) || s[i-1] == '('))){
            temp.push_back(s[i]);
            if(i+1 == s.size() || !isdigit(s[i+1])){
                infix.push_back(temp);
                temp.clear();
            }
        }// if besar
        else if(IsOP(s[i]) || s[i] == "(" || s[i] == ")"){
            if(!temp.empty()){
             infix.push_back(temp);
                temp.clear();
            }
            infix.push_back(string(1,s[i]));
        }
    }
    return infix;
}

vector<string> ToPostfix(vector<string> infix){
    stack<string> result;
    vector<string> postfix;
    
    for(string t : infix){
        if(isdigit(t[0]) ||(t.size() > 1 && t[0] == '-' && isdigit(t[1]))){
            postfix.push_back(t);
        }
        else if(t=="("){
            result.push(t);
        }else if(t==")"){
            while(!result.empty() && result.top() != "("){
                postfix.push_back(result.top());
                result.pop();
            }
            result.pop();
        }
        else{
            while(!result.empty() && result.top()!='('&& precedence(t[0]) >=precedence(result.top()[0])){
                postfix.push_back(result.top());
                result.pop();
            }
            result.push(t);
        }
    }
    while(!result.empty()){
        postfix.push_back(result.top());
        result.pop();
    }
    return postfix;
}
       

int main(){

    string input,hasil;
    getline(cin,input);
    vector <string> infix = ToInfix(removeWhitespace(input));
    vector<string> postfix = ToPostfix(infix);

    
    
return 0;
}
