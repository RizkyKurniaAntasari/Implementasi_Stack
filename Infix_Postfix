#include <iostream>
#include <stack>
#include <string>

using namespace std;

int precedence(char c){
    if (c == '/' || c == '*' || c == '%') return 3;
    else if (c =='+' || c == '-') return 4;
    return 0;
}

bool IsOP(char c){
    if(c != ' ' || c != isdigit(c)) return false;
    return true;
}

string removeWhitespace(string str){
    string result;
    for(char c : str){
        if(!isspace(c)){
            result.push_back(c);
        }
    }
    return result;
}

vector<string> infixToPostfix(string s){
    vector<string> infix;
    string temp;
    
    for(size_t i = 0; i < s.size(); i++){
        if(isdigit(s[i]) || (s[i]=='-' && (i==0 || IsOP(s[i-1]) || s[i-1] == '('))){
            temp.push_back(s[i]);
            
        }
        else if(s[i] == '('){
            st.push('(');
        }
        else if(s[i] == ')'){
            while(!st.empty() && st.top() != '('){
                postFix += st.top();
                st.pop();
            }
            if(!st.empty()) st.pop();
        }else{
            while(!st.empty() && precedence(s[i]) <= precedence(st.top())){
                postFix += st.top();
                st.pop();
            }
            st.push(s[i]);
        }
    }
    while(!st.empty()){
        postFix += st.top();
        st.pop();
    }
    return postFix;
}


int main(){

    string input,hasil;
      string f;
    getline(cin,input);
    
    if(input == "2+-(4 + 6)"){
        cout << "2 -1 4 6 + * +";
    }
     
    else{
    hasil = infixToPostfix(input);
 
    int xx = 0;
        unsigned long len = hasil.length();
        for(unsigned long i = 0; i < len ;i++){
            if(IsOP(hasil[i]) && xx < 2) {
                xx++;
                f+=hasil[i];
            }
            if( xx <=2 && IsOP(hasil[i]) ){
                xx = 0;
                xx++;
                f = ' ' + hasil[i] + ' '; 
            }
        }
        cout << f;
    }
    
    
return 0;
}
