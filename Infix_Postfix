#include <iostream>
#include <stack>
#include <bits/stdc++.h>
#include <string>

using namespace std;

bool check(char ch, vector <char> range){
    return find(range.begin(),range.end(), ch) != range.end();
}

bool checkString(string str,vector<string> range){
    return find(range.begin(),range.end(), str) != range.end();
}

string removeWhitespace(string str){
    vector<char>op = {'+','-','/','*','%','(',')'};
    string result;
    for(char ch : str){
        if(isdigit(ch) || check(ch,op)){
            result.push_back(ch);
        }
    }
    return result;
}

vector<string> ToInfix(string s){
    vector<char>op = {'+','/','*','%'};
    vector<char> kurung ={'(',')'};
    vector<string> infix;
    string temp;
    
    for(size_t i = 0;i<s.size();++i){
        if(isdigit(s[i])){
            temp.push_back(s[i]);
            if(i==s.size()-1||!isdigit(s[i+1])){
                infix.push_back(temp);
                temp.clear();
            }
        }else if(check(s[i],op)||check(s[i],kurung)){
            temp.push_back(s[i]);
            infix.push_back(temp);
            temp.clear();
        }else if(s[i]=='-'){
            if(i==0||check(s[i-1],op)||s[i-1]=='('){
                infix.push_back("-1");
                infix.push_back("*");
            }else if(isdigit(s[i+1])&&(i==0||!isdigit(s[i-1]))){
                temp.push_back('-');
            }else{
                infix.push_back("-");
            }
        }  
    }
    return infix;
}

vector<string> ToPostfix(vector<string> infix){
    vector<char>op = {'+','-','/','*','%','(',')'};
    stack<string> result;
    vector<string> postfix;
    
    for(string t : infix){
        if(t == "(") result.push(t);
        else if(t ==")"){
            while(!result.empty() && result.top() != "("){
                postfix.push_back(result.top());
                result.pop();
            }
            result.pop();
        }
        else if(checkString(t,op)){
            while(!result.empty() && result.top() != "(" && checkPrecedence(t) >= checkPrecedence(result.top())){
                postfix.push_back(result.top());
                result.pop();
            }
            result.push(t);
        }
        else{
            postfix.push_back(t);
        }
    }
    while

}

int checkPrecedence(string op){
    if (op == "%" || op == "*" || op == "/") return 3;
    if (op == "-" || op == "+") return 4;
    return 0;
}
       

int main(){

    string input,hasil;
    getline(cin,input);
    //vector <string> infix = ToInfix(removeWhitespace(input));
   // vector<string> postfix = ToPostfix(infix);

    
    
return 0;
}
