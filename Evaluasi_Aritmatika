#include <iostream>
#include <stack>
#include <string>
using namespace std;

int evaluatePostfix(string infix){
    stack <int> st;
    
    for (int i=0;i<infix.size();i++){
        if(infix[i]==' '){
            continue;
        }else if (isdigit(infix[i])){
            int num=0;
            while(isdigit(infix[i])){
                num=num*10+(int)(infix[i]-'0');
                i++;
            }
            i--;
            st.push(num);
        }else{
            int val1=st.top();
            st.pop();
            int val2=st.top();
            st.pop();
            switch(infix[i]){
                case '+':
                st.push(val2+val1);
                break;
                case '-':
                st.push(val2-val1);
                break;
                case '*':
                st.push(val2*val1);
                break;
                case '/':
                st.push(val2/val1);
                break;
            }
        }
    }
    return st.top();
}

int prec(char c) {

    if (c == '/' || c == '*')
        return 2;
    else if (c == '+' || c == '-')
        return 1;
    else
        return -1;
}

void infixToPostfix(string s) {
    stack<char> st;
    string result;

    for (int i = 0; i < s.length(); i++) {
        char c = s[i];

        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')){
            result += c;
            result += ' ';
        }
        else if (c == '('){
            st.push('(');
        }
        else if (c == ')') {
            while (st.top() != '(') {
                result += st.top();
                result += ' ';
                st.pop();
            }
            st.pop();
        }

        else {
            while (!st.empty() && prec(s[i]) < prec(st.top()) ||
                   !st.empty() && prec(s[i]) == prec(st.top())) {
                result += st.top();
                result += ' ';
                st.pop();
            }
            st.push(c);
        }
    }

    while (!st.empty()) {
        result += st.top();
        result += ' ';
        st.pop();
    }

    cout<<evaluatePostfix(result);
}

int main(){
string exp;
    getline(cin,exp);
    infixToPostfix(exp);
    return 0;
}
